import os
import osproc
import re
import sequtils
import strutils

import utils

var regex = re.re("```!(python|mathjax).*?```", {re.reMultiLine, reDotAll})

iterator findExecBlocks*(xs:string): (int, int) =
    var remainingxs = xs
    var start = 0
    while true:
        var b = re.findBounds(remainingxs, regex, start)
        if b[0] < 0:
            break
        else:
            start = b[1] + 1
            yield b

proc removePyBlockFiles(filename:string) =
    for f in walkFiles(filename & "-pyblock-*.*"):
        removeFile(f)

proc processExecBlocks*(dirname:string, filename:string, s:string):string =
    var last = 0
    var pythonScript: seq[string] = @[]
    add(pythonScript, """import sys
_baker_mpl = True

global image_counter
image_counter = 0

global block_name
block_name = ''

try:
    import matplotlib
    #matplotlib.use('Agg')
    import matplotlib.pyplot as _baker_plt

    def matplot_show(*args, **kw):
        global image_counter
        image_counter = image_counter + 1
        image_name = block_name + '-' + str(image_counter) + '.png'
        _baker_plt.savefig(image_name, figsize=(8, 6), dpi=80)
        _baker_plt.clf()

    _baker_plt.show = matplot_show
except ImportError:
    _baker_mpl = False
""")

    let filepath = joinPath(dirname, filename)

    var counter = 0
    for b in findExecBlocks(s):
        var execBlock = substr(s, b[0], b[1])
        if find(execBlock, "!python") >= 0:
            inc(counter)
            add(pythonScript, "fout = open('" & filepath & "-pyblock-" & counter.`$` & ".out', 'w'); ferr = open('" & filepath & "-pyblock-" & counter.`$` & ".err', 'w'); sys.stdout = fout; sys.stderr = ferr") 
            add(pythonScript, "block_name = '" & filepath & "-pyblock-" & counter.`$` & "'")
            let pyblk = substr(execBlock, 10, len(execBlock) - 4)
            add(pythonScript, pyblk)
            add(pythonScript, "fout.close(); ferr.close()")
        last = b[1]+1

    if len(pythonScript) > 1:
        var pyname = filepath & "-exec.py"
        var pout = open(pyname, fmWrite)
        write(pout, join(pythonScript, "\n"))
        close(pout)
        discard execProcess("python", args=[pyname], options={poUsePath})
    
    var output: seq[string] = @[]
    last = 0
    counter = 0
    for b in findExecBlocks(s):
        if b[0] > last:
            add(output, substr(s, last, b[0]-1))
        var execBlock = substr(s, b[0], b[1])
        if find(execBlock, "!python") >= 0:
            inc(counter)
            let pyblk = substr(execBlock, 10, len(execBlock) - 4)
            add(output, "```python")
            add(output, pyblk)
            add(output, "```\n")
            
            let fout = filepath & "-pyblock-" & counter.`$` & ".out"
            if fileExists(fout):
                let pyout = strip(readFile(fout))
                if pyout != EmptyString:
                    add(output, "\n<pre><code>")
                    add(output, pyout)
                    add(output, "</code></pre>")
            let ferr = filepath & "-pyblock-" & counter.`$` & ".err"
            if fileExists(ferr):
                let pyout = strip(readFile(ferr))
                if pyout != EmptyString:
                    add(output, "\n<pre><code class=\"error\">")
                    add(output, pyout)
                    add(output, "</code></pre>\n")

            var img_counter = 1
            while true:
                let imgname = filename & "-pyblock-" & counter.`$` & "-" & img_counter.`$` & ".png"
                if not fileExists(joinPath(dirname, imgname)):
                    break
                add(output, "<p><img src=\"" & imgname & "\" alt=\"Image " & img_counter.`$` & ", generated by python code block " & counter.`$` & "\" /></p>\n")
                inc(img_counter)

        last = b[1]+1

    if last < len(s):
        add(output, substr(s, last))

    removePyBlockFiles(filename)
    return join(output, "")